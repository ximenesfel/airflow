version: "3.7"
# ====================================== AIRFLOW ENVIRONMENT VARIABLES =======================================
x-environment: &airflow_environment
  - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/1
  - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres:5432/airflow
  - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
  - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
  - AIRFLOW__CORE__LOAD_EXAMPLES=False
  - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow@postgres:5432/airflow
  - AIRFLOW__METRICS__STATSD_HOST=statsd_exporter
  - AIRFLOW__METRICS__STATSD_ON=True
  - AIRFLOW__METRICS__STATSD_PORT=9125
  - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
x-airflow-image: &airflow_image apache/airflow:2.1.1-python3.8
# ====================================== /AIRFLOW ENVIRONMENT VARIABLES ======================================
services:
  postgres:
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - logs:/opt/airflow/logs
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    mem_limit: 200M
    mem_reservation: 200M
    cpus: 0.5

  init:
    image: *airflow_image
    environment: *airflow_environment
    entrypoint: /bin/bash
    command: -c 'airflow db upgrade && sleep 5 && airflow users create --username admin --password admin --firstname Anonymous --lastname Admin --role Admin --email admin@example.org'
    volumes:
      - logs:/opt/airflow/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  webserver:
    image: *airflow_image
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - logs:/opt/airflow/logs
    environment: *airflow_environment
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    mem_limit: 1.5G
    mem_reservation: 1G
    cpus: 1.5

  scheduler:
    image: *airflow_image
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - logs:/opt/airflow/logs
    environment: *airflow_environment
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    mem_limit: 300M
    mem_reservation: 300M
    cpus: 0.5

  worker:
    image: *airflow_image
    restart: always
    depends_on:
      scheduler:
        condition: service_healthy
    volumes:
      - logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
    environment: *airflow_environment
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    mem_limit: 1.5G
    mem_reservation: 1G
    cpus: 1.5

  flower:
    image: *airflow_image
    restart: always
    depends_on:
      worker:
        condition: service_healthy
    ports:
      - "5555:5555"
    environment: *airflow_environment
    command: celery flower
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    mem_limit: 400M
    mem_reservation: 400M
    cpus: 0.5
  
  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    mem_limit: 200M
    mem_reservation: 200M
    cpus: 0.5

volumes:
  postgres-db-volume:
  logs: